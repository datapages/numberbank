---
title: Knower Levels
grid:
  sidebar-width: 0px
  body-width: 1600px
  margin-width: 0px
---

```{r}
library(dplyr)
library(stringr)
library(forcats)
```

```{r}
#| cache: true

# get data from redivis
dataset <- redivis::user("stanford_templates")$dataset("numberbank")
datasets <- dataset$table("datasets")$to_tibble()
subjects <- dataset$table("subjects")$to_tibble()
trials <- dataset$table("trials")$to_tibble()
```

```{r}
#| cache: true

# TODO: fix upstream -- method dupes in dataset, language dupes in subjects/trials
# de-dupe datasets/methods
dataset_methods <- datasets |>
  distinct(dataset_id, method) |>
  group_by(dataset_id) |>
  summarise(method = paste(method, collapse = ", "))

# replacement language values
language_recode <- list(
  "Arabic" = "Saudi",
  "French" = "FranÃ§ais",
  "English" = c("Anglais", "English (India)", "English (US)", "English/Portugese", "English/Spanish"),
  "Slovenian (dual)" = "Slovenian_dual",
  "Slovenian (non-dual)" = c("Slovenian", "Slovenian_nonDual", "Serbian/Slovenian")
)

# data prep
kl_data <- subjects |>
  left_join(dataset_methods) |> # combine subjects and datasets
  rename_with(str_to_lower) |> # lower case all column names
  mutate(across(where(is_character), \(x) na_if(x, "NA")), # replace "NA" with NA
         kl = kl |> factor() |> fct_relabel(\(l) paste0(l, "-knower")), # add "-knower" to kl
         kl_subset = if_else(kl == "CP-knower", kl, "Subset-knower"), # code subset-knowers
         highest_count = as.numeric(highest_count), # convert to numeric
         age_months = as.numeric(age_months)) |> # convert to numeric
  filter(!is.na(kl) | !is.na(highest_count)) |> # remove rows with both kl and highest NA
  mutate(language = language |> fct_collapse(!!!language_recode) |> fct_relevel(sort), # recode + sort languages
         language_country = paste(language, country, sep = "\n")) |> # combination of language and country
  arrange(language, kl, age_months)
```

```{r}
ojs_define(kl_data = kl_data)
```

```{ojs}
Plot = import("https://esm.sh/@observablehq/plot")
import {interval} from '@mootari/range-slider' // two ended slider

font = "Source Sans Pro"

kl = transpose(kl_data)
```

:::{.panel-sidebar}

__Facet by...__
```{ojs}
// facets
viewof fs = Inputs.checkbox(["language", "country", "method"],
                            {value: ["language"]})
fx = fs.includes("method") ? "method" : null // fx = "method" or null
fy = fs.filter(x => x !== "method").join("_") // fy = "language", "country", "language_country", null
```

__Filter by...__
```{ojs}
// age filter
viewof ages = interval([d3.min(kl_data.age_months), d3.max(kl_data.age_months)],
                       {step: 1, label: "Age (months)"})

// language filter
lang_vals = Array.from(new Set(kl_data.language)).sort() // options
lang_defs = ["English"] // default
viewof langs = Inputs.select(lang_vals, {label: "Languages", multiple: true, value: lang_defs})

// country filter
country_vals = Array.from(new Set(kl_data.country)).sort() // options
country_defs = ["United States", "India", "Canada"] // default
viewof countries = Inputs.select(country_vals, {label: "Countries", multiple: true, value: country_defs})

// kl filter
cp_sort = (a, b) => a === "CP-knower" ? 1 : b === "CP-knower" ? -1 : a.localeCompare(b);
kl_vals = Array.from(new Set(kl_data.kl)).sort(cp_sort) // options
kl_defs = kl_vals.filter(s => /^[123C]/.test(s)) // default
viewof kls = Inputs.select(kl_vals, {label: "Knower levels", multiple: true, value: kl_defs})

// kl subset toggle
viewof kl_sub = Inputs.toggle({label: "Group non-CP-knowers together"})
kl_y = kl_sub ? "kl_subset" : "kl"

// dataset filter
dataset_vals = Array.from(new Set(kl_data.dataset_id)).sort() // options
dataset_defs = dataset_vals // default
viewof datasets = Inputs.select(dataset_vals, {label: "Datasets", multiple: true, value: dataset_defs})
```

:::

:::{.panel-fill}

### Distribution of knower level over age

```{ojs}
// filter data using inputs
klf = kl.filter(d => langs.includes(d.language))
        .filter(d => countries.includes(d.country))
        .filter(d => datasets.includes(d.dataset_id))
        .filter(d => kls.includes(d.kl))
        .filter(d => d.age_months >= ages[0] && d.age_months <= ages[1])

// possible kl values in filtered data
klfv = Array.from(new Set(klf.map(d => d[kl_y]))).sort(cp_sort)

// boxplot
Plot.plot({
  style: { fontFamily: font },
  marginLeft: 100,
  marginRight: 100,
  x: { label: "Age (months)", grid: true, inset: 10 },
  y: { label: "Knower level", domain: klfv },
  color: { domain: klfv },
  facet: { label: null },
  marks: [
    Plot.frame(),
    Plot.boxX(klf, {
      x: "age_months",
      y: kl_y,
      fx: fx,
      fy: fy,
      fill: kl_y
    })
  ]
})
```

### Counts of knower level in each dataset

```{ojs}
// sample size plot
Plot.plot({
  style: { fontFamily: font },
  marginLeft: 180,
  color: { legend: true, marginLeft: 180, domain: klfv },
  x: { axis: "top", label: "Count" },
  y: { label: "Dataset" },
  marks: [
    Plot.barX(klf, Plot.groupY(
      { x: "count" },
      { fill: kl_y, y: "dataset_id", inset: 1, sort: { y: "x", reverse: true }, order: "sum" }
    )),
    Plot.textX(klf, Plot.stackX(Plot.groupY(
      { x: "count", text: "count" },
      { y: "dataset_id", z: kl_y, fill: "white", order: "sum" }
    ))),
  ]
})
```

### Cumulative probability of knower level over age

```{ojs}
// cumulative probability plot
Plot.plot({
  style: { fontFamily: font },
  marginRight: 100,
  color: { legend: true, domain: klfv },
  x: { label: "Age (months)", grid: true, inset: 10 },
  y: { label: "Cumulative probability of knower level", inset: 10 },
  facet: { label: null },
  marks: [
    Plot.frame(),
    Plot.lineY(klf, Plot.normalizeY("extent", // scale to 0-1
                    Plot.mapY("cumsum", // cumulative sum
                    Plot.binY({ y: "count" }, { // count in each age bin
      x: "age_months",
      stroke: kl_y,
      fx: fx,
      fy: fy
    }))))
  ]
})
```

:::
